From f97bc34111aa9a6b28dadc3d320a3623b24decbf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Emilio=20Cobos=20=C3=81lvarez?= <emilio@crisal.io>
Date: Wed, 2 Dec 2020 11:05:16 +0000
Subject: [PATCH 1/2] Bug 1680166 - Return EFAULT when given a null path to
 stat* calls in the sandbox filter.

It's a common way to check the existence of system calls. Glibc may fall back to fstatat when statx is called, passing down the null path.

Since we handle fstatat, let's return -EFAULT the same way the real fstatat syscall would do.

This is needed for the sandbox not to constantly crash due to this statx call in rustc: https://github.com/rust-lang/rust/blob/09c9c9f7da72b774cc445c0f56fc0b9792a49647/library/std/src/sys/unix/fs.rs#L119-L123
---
 security/sandbox/linux/SandboxBrokerClient.cpp | 8 ++++++++
 security/sandbox/linux/SandboxFilter.cpp       | 6 +++---
 security/sandbox/linux/gtest/TestBroker.cpp    | 8 ++++++++
 3 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/security/sandbox/linux/SandboxBrokerClient.cpp b/security/sandbox/linux/SandboxBrokerClient.cpp
index d17c34ce45a6..6876796e991d 100644
--- a/security/sandbox/linux/SandboxBrokerClient.cpp
+++ b/security/sandbox/linux/SandboxBrokerClient.cpp
@@ -159,11 +159,19 @@ int SandboxBrokerClient::Access(const char* aPath, int aMode) {
 }
 
 int SandboxBrokerClient::Stat(const char* aPath, statstruct* aStat) {
+  if (!aPath || !aStat) {
+    return -EFAULT;
+  }
+
   Request req = {SANDBOX_FILE_STAT, 0, sizeof(statstruct)};
   return DoCall(&req, aPath, nullptr, (void*)aStat, false);
 }
 
 int SandboxBrokerClient::LStat(const char* aPath, statstruct* aStat) {
+  if (!aPath || !aStat) {
+    return -EFAULT;
+  }
+
   Request req = {SANDBOX_FILE_STAT, O_NOFOLLOW, sizeof(statstruct)};
   return DoCall(&req, aPath, nullptr, (void*)aStat, false);
 }
diff --git a/security/sandbox/linux/SandboxFilter.cpp b/security/sandbox/linux/SandboxFilter.cpp
index dc5dd51a5e3e..b60902e841e4 100644
--- a/security/sandbox/linux/SandboxFilter.cpp
+++ b/security/sandbox/linux/SandboxFilter.cpp
@@ -244,8 +244,8 @@ class SandboxPolicyCommon : public SandboxPolicyBase {
     auto buf = reinterpret_cast<statstruct*>(aArgs.args[2]);
     auto flags = static_cast<int>(aArgs.args[3]);
 
-    if (fd != AT_FDCWD && (flags & AT_EMPTY_PATH) != 0 &&
-        strcmp(path, "") == 0) {
+    if (fd != AT_FDCWD && (flags & AT_EMPTY_PATH) && path &&
+        !strcmp(path, "")) {
 #ifdef __NR_fstat64
       return DoSyscall(__NR_fstat64, fd, buf);
 #else
@@ -257,7 +257,7 @@ class SandboxPolicyCommon : public SandboxPolicyBase {
       return BlockedSyscallTrap(aArgs, nullptr);
     }
 
-    if (fd != AT_FDCWD && path[0] != '/') {
+    if (fd != AT_FDCWD && path && path[0] != '/') {
       SANDBOX_LOG_ERROR("unsupported fd-relative fstatat(%d, \"%s\", %p, %d)",
                         fd, path, buf, flags);
       return BlockedSyscallTrap(aArgs, nullptr);
diff --git a/security/sandbox/linux/gtest/TestBroker.cpp b/security/sandbox/linux/gtest/TestBroker.cpp
index 9833ec42177c..29f9fde5841b 100644
--- a/security/sandbox/linux/gtest/TestBroker.cpp
+++ b/security/sandbox/linux/gtest/TestBroker.cpp
@@ -217,6 +217,14 @@ TEST_F(SandboxBrokerTest, Stat) {
   EXPECT_EQ(realStat.st_ino, brokeredStat.st_ino);
   EXPECT_EQ(realStat.st_rdev, brokeredStat.st_rdev);
 
+  // Add some indirection to avoid -Wnonnull warnings.
+  [&](const char* aPath) {
+    EXPECT_EQ(-1, statsyscall(aPath, &realStat));
+    EXPECT_EQ(errno, EFAULT);
+
+    EXPECT_EQ(-EFAULT, Stat(aPath, &brokeredStat));
+  }(nullptr);
+
   EXPECT_EQ(-ENOENT, Stat("/var/empty/qwertyuiop", &brokeredStat));
   EXPECT_EQ(-EACCES, Stat("/dev", &brokeredStat));
 
-- 
2.30.1

